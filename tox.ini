[tox]
requires =
    tox >= 4
env_list = lint-check
; TODO: Consider using
; skipsdist = true


[testenv:beauty]
; env_name = beauty
; env_dir = {work_dir}/beauty
; env_log_dir = {work_dir}/beauty/log
; env_tmp_dir = {work_dir}/beauty/tmp
description = Beautify your setup
skip_install = True
    ; lint-check: Checks for lint errors
    ; lint-fix: Fixes your lint errors where possible
    ; style-check: Checks for code style errors
    ; style-fix: Fixes code style errors
deps =
    -r requirements/beauty.requirements.txt
commands = ruff {posargs:check src/}
    ; lint-check: black --check src/
    ; lint-fix: black src/
    ; style-check: ruff check src/
    ; style-fix: ruff src/

[testenv:ide]
description = Environment containing all dependencies for your IDE
skip_install = True
deps =
    -r requirements/local.requirements.txt
commands =
    python -c 'print("Environment installed. Point your IDE to this environment")'

# TODO: Think about the tests and the editable install dependencies
; Why do we use requirements.txt and not the other files?
;   Well, we want to test against the locked-down production requirements
;   If we were to install with 
; Requirements that are needed for the application
; Since we are doing `skipsdist` in the global configuration, we need to install the package here.
[testenv:test]
description = Run tests
deps =
    -r requirements/testing.requirements.txt
    -r requirements/requirements.txt
commands =
    pytest

; TODO: Generate multilanguage and serving
[testenv:docs]
description = Generates documentation for your project
deps =
    -r requirements/docs.requirements.txt

[testenv:security]
deps =
    -r requirements/security.requirements.txt
commands =
    bandit {posargs:-r src}

